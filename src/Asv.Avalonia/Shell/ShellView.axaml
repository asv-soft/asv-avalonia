<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:avalonia="clr-namespace:Asv.Avalonia;assembly=Asv.Avalonia"
             xmlns:avalonia1="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="Asv.Avalonia.ShellView"
             x:DataType="avalonia:ShellViewModel">
    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
         to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <avalonia:DesignTimeShellViewModel />
    </Design.DataContext>
    <UserControl.Styles>
        <Style Selector="Border.status">
            <Style Selector="^.normal">
                <Setter Property="BorderBrush" Value="{DynamicResource SystemAltHighColor}" />
                <Setter Property="Background" Value="{StaticResource AsvBackgroundInfoBrush}"/>
            </Style>
            <Style Selector="^.error">
                <Setter Property="BorderBrush" Value="{DynamicResource AsvForegroundErrorBrush}" />
                <Setter Property="Background" Value="{StaticResource AsvBackgroundErrorBrush}"/>
            </Style>
            <Style Selector="^.warning">
                <Setter Property="BorderBrush" Value="{DynamicResource AsvForegroundWarningBrush}" />
                <Setter Property="Background" Value="{StaticResource AsvBackgroundWarningBrush}"/>
            </Style>
        </Style>
        <Style Selector="Border.frame">
            <Style Selector="^.normal">
                <Setter Property="BorderBrush" Value="{DynamicResource SystemAltHighColor}" />
            </Style>
            <Style Selector="^.error">
                <Setter Property="BorderBrush" Value="{DynamicResource AsvForegroundErrorBrush}" />
            </Style>
            <Style Selector="^.warning">
                <Setter Property="BorderBrush" Value="{DynamicResource AsvForegroundWarningBrush}" />
            </Style>
        </Style>
        
        
        <Style Selector="DropDownButton#WindowControlButton /template/ PathIcon">
            <Setter Property="IsVisible" Value="False" />
        </Style>
    </UserControl.Styles>
    <Border Classes="frame" BorderThickness="1"
            Classes.normal="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Normal} }"
            Classes.error="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Error} }"
          Classes.warning="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Warning} }"
          >
    <DockPanel>
        
        <DockPanel Background="{StaticResource SystemBaseHighColor}" Dock="Top"
                   avalonia:WindowHelper.EnableDrag="True"
                   avalonia:WindowHelper.DoubleTappedWindowState="True">
            <DropDownButton Background="Transparent">
                <avalonia1:MaterialIcon Kind="Menu"/>
                <DropDownButton.Flyout>
                    <MenuFlyout ItemsSource="{Binding MainMenuView.Items}">
                        <MenuFlyout.ItemContainerTheme>
                            <ControlTheme TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}" 
                                          x:DataType="avalonia:MenuNode">
                                <Setter Property="Icon" Value="{Binding Base.Icon, Converter={x:Static avalonia:MaterialIconConverter.Instance}}" />
                                <Setter Property="Header" Value="{Binding Base.Header}"/>
                                <Setter Property="ItemsSource" Value="{Binding Items}"/>
                                <Setter Property="Command" Value="{Binding Base.Command}"/>
                                <Setter Property="CommandParameter" Value="{Binding Base.CommandParameter}"/>
                                <Setter Property="IsEnabled" Value="{Binding Base.IsEnabled}" />
                                <Setter Property="IsVisible" Value="{Binding Base.IsVisible}" />
                                <Setter Property="StaysOpenOnClick" Value="{Binding Base.StaysOpenOnClick}" />
                                <Setter Property="HotKey" Value="{Binding Base.HotKey}" />
                            </ControlTheme>
                        </MenuFlyout.ItemContainerTheme>
                    </MenuFlyout>
                </DropDownButton.Flyout>
            </DropDownButton>
            
            <DropDownButton Name="WindowControlButton" Background="Transparent" DockPanel.Dock="Right">
                <avalonia1:MaterialIcon Kind="DotsVertical"/>
                <DropDownButton.Flyout>
                    <MenuFlyout>
                        <MenuItem 
                            Icon="{avalonia1:MaterialIconExt Kind=Close}" Command="{Binding Close}" 
                            Header="{x:Static avalonia:RS.ShellView_WindowControlButton_Close}"/>
                        <MenuItem 
                            Icon="{Binding WindowSateIconKind.Value, Converter={StaticResource MaterialIconConverter}}" 
                            Command="{Binding ChangeWindowState}" 
                            Header="{Binding WindowStateHeader.Value}" />
                        <MenuItem 
                            Icon="{avalonia1:MaterialIconExt Kind=Minimize}" 
                            Command="{Binding Collapse}" 
                            Header="{x:Static avalonia:RS.ShellView_WindowControlButton_Collapse}"/>
                    </MenuFlyout>
                </DropDownButton.Flyout>
            </DropDownButton>
            <Button Background="Transparent" DockPanel.Dock="Right" DataContext="{Binding ElementName=DockControl}" Command="{Binding UnSplitAllCommand}">
                <avalonia1:MaterialIcon Kind="ArrowLeftBox"/>
                <ToolTip.Tip>
                    <TextBlock Text="Un split all tabs"/>
                </ToolTip.Tip>
            </Button>

            <Button Background="Transparent" DockPanel.Dock="Right">
                <avalonia1:MaterialIcon Kind="Cog"/>
            </Button>
            
            <StackPanel Spacing="4" HorizontalAlignment="Center" Orientation="Horizontal">
                <Button Background="Transparent" Command="{Binding Navigation.Backward}">
                    <avalonia1:MaterialIcon Kind="ArrowLeft"/>
                </Button>
                <Button Background="Transparent" Command="{Binding Navigation.Forward}">
                    <avalonia1:MaterialIcon Kind="ArrowRight"/>
                </Button>
                <AutoCompleteBox VerticalAlignment="Center" Width="200"></AutoCompleteBox>
            </StackPanel>
            
        </DockPanel>
        <Border Classes="status" DockPanel.Dock="Bottom"
                BorderThickness="0, 1, 0, 0"
                Classes.normal="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Normal} }"
                Classes.error="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Error} }"
                Classes.warning="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Warning} }"
        >
           
        </Border>
        
        
        <Border BorderThickness="0, 1, 0, 0" Classes="frame" 
                Classes.normal="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Normal} }"
                Classes.error="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Error} }"
                Classes.warning="{Binding ErrorState, 
              Converter={x:Static avalonia:EnumToBooleanConverter.Instance}, 
              ConverterParameter={x:Static avalonia:ShellErrorState.Warning} }">
            <avalonia:DockControl 
                x:Name="DockControl"
                MaxSplitAmount="3" 
                BorderHighLightColor="{DynamicResource SystemAccentColor}" 
                ItemsSource="{CompiledBinding PagesView}" 
                SelectedItem="{Binding SelectedPage.Value, Mode=TwoWay}">
                 <avalonia:DockControl.TabControlStripItemTemplate> 
                     <DataTemplate> 
                         <StackPanel Orientation="Horizontal" Spacing="4"> 
                             <avalonia1:MaterialIcon Width="16" Height="16" Kind="{Binding Icon}"/> 
                             <TextBlock VerticalAlignment="Center" Text="{Binding Title}"/> 
                             <Button Theme="{StaticResource TransparentButton}" Command="{Binding TryClose}"  Padding="0"> 
                                 <avalonia1:MaterialIcon Kind="Close"/> 
                             </Button> 
                         </StackPanel> 
                     </DataTemplate>
                 </avalonia:DockControl.TabControlStripItemTemplate> 
            </avalonia:DockControl>
        </Border>
    </DockPanel>
    </Border>
  
</UserControl>
