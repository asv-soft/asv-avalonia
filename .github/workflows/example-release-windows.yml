name: Build and Release Example For Windows

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-rc'

env:
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'
  GITHUB_PACKAGES_URL: 'https://nuget.pkg.github.com/asv-soft/index.json'
  PROJECT_NAME: 'Asv.Avalonia.Example'
  PROPS_VERSION_VAR_NAME: 'ApiVersion'

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Install Windows SDK
        run: choco install windows-sdk-10-version-1903-all -y
        
      - name: Add signtool to PATH
        run: echo "C:\Program Files (x86)\Windows Kits\10\bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Add NuGet source
        run: dotnet nuget add source ${{ env.GITHUB_PACKAGES_URL }} --username '${{secrets.USER_NAME}}' --password '${{secrets.GIHUB_NUGET_AUTH_TOKEN}}' --store-password-in-clear-text      
      
      - name: Install dependencies
        run: |
          dotnet restore ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj
          dotnet restore ./src/${{ env.PROJECT_NAME }}.Desktop/${{ env.PROJECT_NAME }}.Desktop.csproj

      - name: Build
        run: |
          dotnet build ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj --no-restore
          dotnet build ./src/${{ env.PROJECT_NAME }}.Desktop/${{ env.PROJECT_NAME }}.Desktop.csproj --no-restore

      - name: Set version variable
        env:
          TAG: ${{ github.ref_name }}
        run: echo "VERSION=${TAG#v}" >> $GITHUB_ENV


      # here you must define path to your .csproj
      - name: Publish project for installer
        run: dotnet publish ./src/${{ env.PROJECT_NAME }}.Desktop/${{ env.PROJECT_NAME }}.Desktop.csproj -c Release -o ./publish/app

      - name: Install NSIS
        run: |
              choco install nsis

      #here you must define path to your .nsi file (it is used for installer setup and creation)
      - name: Create EXE installer
        run: makensis ./win-64-install.nsi
        
      - name: Decode certificate
        shell: pwsh
        run: |
          [System.IO.File]::WriteAllBytes("certificate.pfx", [Convert]::FromBase64String("${{ secrets.WINDOWS_SIGNING_CERTIFICATE }}"))
      
      - name: Sign Installer
        run: |
          signtool sign /f certificate.pfx /p "${{ secrets.WINDOWS_SIGNING_PASSWORD }}" /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 AsvAvaloniaExampleInstaller.exe

      - name: Verify Signature
        run: signtool verify /pa AsvAvaloniaExampleInstaller.exe

      - name: List output files
        run: Get-ChildItem -Path ./publish/app -Force
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 
        env:
            GITHUB_TOKEN: ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }}
            RELEASE_BODY: ${{ steps.create-release-notes.outputs.release-notes }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') }}
        

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./AsvAvaloniaExampleInstaller.exe
          asset_name: asv-drones-${{ github.ref_name }}-setup-windows-64.exe
          asset_content_type: application/vnd.microsoft.portable-executable