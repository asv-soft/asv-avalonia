name: Deploy Nuget

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-dev.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-dev"

env:
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output/
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'
  GITHUB_PACKAGES_URL: 'https://nuget.pkg.github.com/asv-soft/index.json'
  PROJECT_NAME: 'Asv.Avalonia'
  PROPS_VERSION_VAR_NAME: 'ProductVersion'

jobs:
  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: Setup .Net
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
            8.0.x

      - name: Add NuGet source
        run: dotnet nuget add source ${{ env.GITHUB_PACKAGES_URL }} \--username '${{secrets.USER_NAME}}' \--password '${{secrets.GIHUB_NUGET_AUTH_TOKEN}}' \--store-password-in-clear-text

      - name: Restore dependencies
        run: |
          dotnet restore ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj 
          dotnet restore ./src/${{ env.PROJECT_NAME }}.DC/${{ env.PROJECT_NAME }}.DC.csproj  
          dotnet restore ./src/${{ env.PROJECT_NAME }}.IO/${{ env.PROJECT_NAME }}.IO.csproj    
          dotnet restore ./src/${{ env.PROJECT_NAME }}.Map/${{ env.PROJECT_NAME }}.Map.csproj       
          dotnet restore ./src/${{ env.PROJECT_NAME }}.Plugins/${{ env.PROJECT_NAME }}.Plugins.csproj
          

      - name: Build projects
        run: |
          dotnet build ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj --configuration Release --no-restore
          dotnet build ./src/${{ env.PROJECT_NAME }}.DC/${{ env.PROJECT_NAME }}.DC.csproj --configuration Release --no-restore 
          dotnet build ./src/${{ env.PROJECT_NAME }}.IO/${{ env.PROJECT_NAME }}.IO.csproj --configuration Release --no-restore
          dotnet build ./src/${{ env.PROJECT_NAME }}.Map/${{ env.PROJECT_NAME }}.Map.csproj --configuration Release --no-restore
          dotnet build ./src/${{ env.PROJECT_NAME }}.Plugins/${{ env.PROJECT_NAME }}.Plugins.csproj --configuration Release --no-restore

      - name: Set version variable
        env:
          TAG: ${{ github.ref_name }}
        run: echo "VERSION=${TAG#v}" >> $GITHUB_ENV

      - name: Read version from Directory.Build.props
        id: read-version
        run: |
          version=$(grep -oP '<${{env.PROPS_VERSION_VAR_NAME}}>\K[^<]+' ./src/Directory.Build.props)
          echo "PropsVersion=${version}" >> $GITHUB_ENV

      - name: Compare tag with NuGet package version
        run: |
          if [ "${{ env.PropsVersion }}" != "${{ env.VERSION }}" ]; then
            echo "Error: Tag does not match NuGet package version"
            exit 1
          fi

      - name: Check version
        run: echo ${{ env.VERSION }}

      - name: Set project version
        run: |
          dotnet tool install -g dotnet-setversion    
          setversion ${{ env.VERSION }} ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj    
          setversion ${{ env.VERSION }} ./src/${{ env.PROJECT_NAME }}.IO/${{ env.PROJECT_NAME }}.IO.csproj    
          setversion ${{ env.VERSION }} ./src/${{ env.PROJECT_NAME }}.Map/${{ env.PROJECT_NAME }}.Map.csproj       
          setversion ${{ env.VERSION }} ./src/${{ env.PROJECT_NAME }}.Plugins/${{ env.PROJECT_NAME }}.Plugins.csproj

      - name: Pack projects to Nuget
        run: |
          dotnet pack ./src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj -c Release /p:Version="${{ env.VERSION }}" --no-build -o .
          dotnet pack ./src/${{ env.PROJECT_NAME }}.IO/${{ env.PROJECT_NAME }}.IO.csproj -c Release /p:Version="${{ env.VERSION }}" --no-build -o .
          dotnet pack ./src/${{ env.PROJECT_NAME }}.Map/${{ env.PROJECT_NAME }}.Map.csproj -c Release /p:Version="${{ env.VERSION }}" --no-build -o .
          dotnet pack ./src/${{ env.PROJECT_NAME }}.Plugins/${{ env.PROJECT_NAME }}.Plugins.csproj -c Release /p:Version="${{ env.VERSION }}" --no-build -o .

      - name: List output files
        run: ls -la

      - name: Push packages to Github
        run: |
          dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}${{ env.PROJECT_NAME }}.${{ env.VERSION }}.nupkg -k ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }} --skip-duplicate -s ${{ env.GITHUB_PACKAGES_URL }}
          dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}${{ env.PROJECT_NAME }}.IO.${{ env.VERSION }}.nupkg -k ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }} --skip-duplicate -s ${{ env.GITHUB_PACKAGES_URL }}
          dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}${{ env.PROJECT_NAME }}.Map.${{ env.VERSION }}.nupkg -k ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }} --skip-duplicate -s ${{ env.GITHUB_PACKAGES_URL }}
          dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}${{ env.PROJECT_NAME }}.Plugins.${{ env.VERSION }}.nupkg -k ${{ secrets.GIHUB_NUGET_AUTH_TOKEN }} --skip-duplicate -s ${{ env.GITHUB_PACKAGES_URL }}